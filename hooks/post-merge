#!/bin/bash
export DOT_GIT_DIR=$(git rev-parse --git-dir 2>/dev/null)
echo iniciando post-merge...
echo args: $@
git status

branch=`git status -b | grep branch`
isDevelop=`git status -sb | grep develop`
isMaster=`git status -sb | grep master`
isFeature=`git status -sb | grep feature`
isRelease=`git status -sb | grep release`
isHotfix=`git status -sb | grep hotfix`
echo branch: $branch

version=`cat package.json | grep version | awk '{print $2}' FS=":" | sed 's/[\"\,\ ]//g'`


hasRC=`echo $version | grep rc`
message=`cat "$(git rev-parse --show-toplevel)"/.git/COMMIT_EDITMSG`
hasMerge=`echo $message | grep "before merge"`

if [ "$version" != "" ]; then
#   git tag -a "v$version" -m "`git log -1 --format=%s`"
  echo on version: $version
  if [ "$isFeature" == "" ]; then
    echo "no feature"
    if [ "$hasRC" == "" ]; then
      echo "noRC"
      if [ "$hasMerge" == "" ]; then
        echo no es un merge....
        npm version --no-git-tag-version patch
        git add package.json
      fi
    else
      echo "es una RC"
      v0=`echo $version | awk '{print $1}' FS='-rc'`
      echo v0 $v0
      v=$((v+1))
      npm version --no-git-tag-version $v0
      git add package.json
      git commit -am "[merge] post-merge commit" $message 
    fi
  else
    echo "feature"
    if [ "$hasRC" == "" ]; then
      echo "noRC"
      npm version --no-git-tag-version $version-rc0
      git add package.json
    else
      echo "es una RC"
      v0=`echo $version | awk '{print $1}' FS='rc'`
      echo v0 $v0
      v=`echo $version | awk '{print $2}' FS='rc'`
      echo v $v
      v=$((v+1))
      npm version --no-git-tag-version $v0'rc'$v
      git add package.json
    fi
  fi
fi

echo finalizando post-merge
