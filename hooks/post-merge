#!/bin/bash
. ./hooks/utils

ACTIVE=`cat ./hooks/ACTIVE | grep 0`

if [ "$ACTIVE" != "" ]; then
  log_info "post-merge... no active"
  exit 0
fi

log_info "iniciando post-merge..."
log_info "args: $@"
git status

branch=`git status -b | grep branch`
isDevelop=`git status -sb | grep develop`
isMaster=`git status -sb | grep master`
isFeature=`git status -sb | grep feature`
featureName=`git status -sb | grep feature | awk '{print $2}' FS="/"`
isRelease=`git status -sb | grep release`
isHotfix=`git status -sb | grep hotfix`
log_info "branch: $branch"

version=`cat package.json | grep version | awk '{print $2}' FS=":" | sed 's/[\"\,\ ]//g'`


hasRC=`echo $version | grep rc`
message=`cat "$(git rev-parse --show-toplevel)"/.git/COMMIT_EDITMSG`
hasMerge=`echo $message | grep "Merge"`

if [ "$version" != "" ]; then
#   git tag -a "v$version" -m "`git log -1 --format=%s`"
  log_info "on version: $version"
  if [ "$isFeature" == "" ]; then
    log_info "no feature"
    if [ "$hasRC" == "" ]; then
      log_info "noRC"
      if [ "$hasMerge" == "" ]; then
        log_info "no es un merge...."
        npm version --no-git-tag-version patch
        git add package.json
      else
      	log_info "es un merge...."
        exit 0
      	# git flow feature finish $featureName
      fi
    else
      log_info "es una RC"
      v0=`echo $version | awk '{print $1}' FS='-rc'`
      log_info "v0 $v0"
      v=$((v+1))
      npm version --no-git-tag-version $v0
      git add package.json
      git commit -m "$message"
    fi
  else
    log_info "feature"
    if [ "$hasRC" == "" ]; then
      log_info "noRC"
      npm version --no-git-tag-version $version-rc0
      git add package.json
    else
      log_info "es una RC"
      v0=`echo $version | awk '{print $1}' FS='rc'`
      log_info "v0 $v0"
      v=`echo $version | awk '{print $2}' FS='rc'`
      log_info "v $v"
      v=$((v+1))
      npm version --no-git-tag-version $v0'rc'$v
      git add package.json
    fi
  fi
fi

log_info "finalizando post-merge"
