#!/bin/bash
. ./hooks/utils

ACTIVE=`cat ./hooks/ACTIVE | grep 0`

if [ "$ACTIVE" != "" ]; then
  log_info "pre-commit... no active"
  exit 0
fi

updateVersion() {
  log_info "new package.json version: $1"
  npm version --no-git-tag-version $1
  git add package.json
  log_info "finalizando pre-commit"
}

log_info "iniciando pre-commit..."
log_info "args: $@"

branch=`git status -b | grep branch`
isDevelop=`git status -sb | grep develop`
isMaster=`git status -sb | grep master`
isFeature=`git status -sb | grep feature`
isRelease=`git status -sb | grep release`
isHotfix=`git status -sb | grep hotfix`
log_info "branch: $branch"

message=`cat "$(git rev-parse --show-toplevel)"/.git/COMMIT_EDITMSG`
log_info "commit message: $message"
isMerge=`echo $message | grep "Merge"`

toMaster=`echo $message | grep "from prepare"`
fromMerge=`echo $message | grep "from merge"`

version=`cat package.json | grep version | awk '{print $2}' FS=":" | sed 's/[\"\,\ ]//g'`
log_info "on version: $version"

if [ "$version" == "" ]; then
  log_info "no version found"
  exit 0
fi

hasRC=`echo $version | grep rc`
v0=`echo $version | awk '{print $1}' FS='-rc'`
v=`echo $version | awk '{print $2}' FS='-rc'`

nextVersion=$version

if [ "$isFeature" != "" ]; then
  log_info "is Feature"
  if [ "$hasRC" == "" ]; then
    log_info "without rc"
    nextVersion=$v0-rc0
  else
    log_info "with rc"
    v=$((v+1))
    nextVersion=$v0'-rc'$v
  fi
  updateVersion "$nextVersion"
fi

if [ "$isDevelop" != "" ]; then
  log_info "is Develop"
  nextVersion=patch
  if [ "$hasRC" != "" ]; then
    log_info "with rc"
    vr=`echo $v0 | awk '{print $1"."$2"."}' FS="."`
    vp=`echo $v0 | awk '{print $3}' FS='.'`
    vp=$((vp+1))
    nextVersion=$vr$vp
  fi
  if [ "$toMaster" != "" ]; then
    log_info "to Master"
    nextVersion=minor
  fi
  updateVersion "$nextVersion"
fi
